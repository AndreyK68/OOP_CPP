#include<iostream>
using namespace std;
using std::cin;
using std::cout;
using std::endl;

#define tab "\t"

class Point
{
	double x;
	double y;
public:
	double get_x()const
	{
		return x;
	}
	double get_y()const
	{
		return y;
	}
	void set_x(double x)
	{
		this->x = x;
	}
	void set_y(double y)
	{
		this->y = y;
	}
};
//Создавая структуру или класс мы создаем тип данных.
//Классы и структуры еще называют пользовательскими типами данных.
//Соответственно, объекты являются переменными пользвательского типа.
//					СТРУКТУРА - ЭТО ТИП ДАННЫХ!!!
//						КЛАСС - ЭТО ТИП ДАННЫХ!!!

//#define STRUCT_POINT

void main()
{
	setlocale(LC_ALL, "");
#ifdef STRUCT_POINT
	// type name;
	int a;		//Объявляем переменную 'a' типа 'int'
	//Создание объекта
	Point A;	//Объявляем переменную 'A' типа 'Point'	
				//Объявляем объект 'A' структуры 'Point'
				//Создаем экземпляр 'A' структуры 'Point'
	//Объект класса или структуры еще называют экземпляром (instance) класса или структуры.
	//Instantiate - создать экземпляр (объект).
	A.x = 2;
	A.y = 3;
	cout << A.x << tab << A.y << endl;

	Point* pA = &A;	//Объявляем указатель на Point и берем адрес точки 'A'
	cout << pA->x << tab << pA->y << endl;
	cout << (*pA).x << tab << (*pA).y << endl;
#endif // STRUCT_POINT

	Point A;
	A.set_x(2);
	A.set_y(3);
	cout << A.get_x() << tab << A.get_y() << endl;

	for (int i = 0; i < 5; i++)
	{
		cout << i << tab;
	}
	cout << endl;
}

/*
------------------------------------------------------------
.  - Оператор прямого доступа (Point operator).
-> - Оператор косвенного доступа (Arrow operator).
------------------------------------------------------------
*/

/*
------------------------------------------------------------
Концепции ООП:
1.	Инкапсуляция;
2.	Наследование;
3.	Полиморфизм;
Инкапсуляция (Encapsulation)
Модификаторы доступа:
private:
public:
protected:

get/set-методы
get(взять, получить)   - открывают доступ к переменным на чтение;
set(задать, установить)- открывают доступ к переменным на запись.
set-методы так-же обеспечивают фильтрацию данных, если она нужна;
------------------------------------------------------------
*/

/*
------------------------------------------------------------
Constructor - это метод, который создает объект.
~Destructor  - это метод, который уничтожает объект по завершении его времени жизни.
Operator=
------------------------------------------------------------
*/